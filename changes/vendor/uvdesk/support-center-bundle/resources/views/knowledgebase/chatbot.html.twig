{% extends "@UVDeskSupportCenter/Templates/layout.html.twig" %}

{% block title %}{% trans %}Chatbot FAQ{% endtrans %}{% endblock %}
{% block ogtitle %}{% trans %}Chatbot FAQ{% endtrans %}{% endblock %}
{% block twtitle %}{% trans %}Chatbot FAQ{% endtrans %}{% endblock %}
{% block metaDescription %}{% trans %}Get instant answers to your questions with our AI-powered chatbot{% endtrans %}{% endblock %}
{% block metaKeywords %}{% trans %}chatbot,faq,help,assistant,support{% endtrans %}{% endblock %}

{% block templateCSS %}
<style>
    .chatbot-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        min-height: 500px;
    }

    .chatbot-header {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 1px solid #f0f0f0;
    }

    .chatbot-header h1 {
        color: #333;
        font-size: 24px;
        font-weight: 500;
        margin: 0;
    }

    .chatbot-header p {
        color: #666;
        margin: 10px 0 0 0;
        font-size: 14px;
    }

    .chat-messages {
        height: 350px;
        overflow-y: auto;
        padding: 15px;
        background: #fafafa;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .message {
        margin-bottom: 15px;
        display: flex;
        align-items: flex-start;
    }

    .message.bot {
        justify-content: flex-start;
    }

    .message.user {
        justify-content: flex-end;
    }

    .message-content {
        max-width: 70%;
        padding: 12px 16px;
        border-radius: 18px;
        font-size: 14px;
        line-height: 1.4;
        word-wrap: break-word;
    }

    .message-content strong {
        font-weight: 600;
    }

    .message-content em {
        font-style: italic;
    }

    .bot .message-content {
        background: #e8f5e8;
        color: #2c5e2c;
        border-bottom-left-radius: 4px;
        white-space: normal;
    }

    .user .message-content {
        background: #007bff;
        color: white;
        border-bottom-right-radius: 4px;
    }

    .faq-suggestions {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 10px;
        margin-bottom: 20px;
    }

    .faq-btn {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 10px 15px;
        font-size: 13px;
        color: #495057;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
    }

    .faq-btn:hover {
        background: #e9ecef;
        border-color: #ced4da;
    }

    .chat-input-container {
        display: flex;
        gap: 10px;
    }

    .chat-input {
        flex: 1;
        padding: 12px 16px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 14px;
        outline: none;
        transition: border-color 0.2s ease;
    }

    .chat-input:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .chat-input:disabled {
        background-color: #f8f9fa;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .send-btn {
        padding: 12px 20px;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        transition: background 0.2s ease;
    }

    .send-btn:hover {
        background: #0056b3;
    }

    .send-btn:disabled {
        background: #ccc;
        cursor: not-allowed;
    }

    .typing-indicator {
        display: none;
        padding: 8px 16px;
        background: #e8f5e8;
        border-radius: 18px;
        color: #2c5e2c;
        font-size: 14px;
        margin-bottom: 15px;
    }

    .typing-indicator span {
        animation: typing 1.4s infinite;
    }

    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }

    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }

    @keyframes typing {
        0%, 60%, 100% { opacity: 0.3; }
        30% { opacity: 1; }
    }

    @media (max-width: 768px) {
        .chatbot-container {
            margin: 10px;
            padding: 15px;
        }
        
        .message-content {
            max-width: 85%;
        }
        
        .faq-suggestions {
            grid-template-columns: 1fr;
        }
    }
</style>
{% endblock %}

{% block body %}
<div class="chatbot-container">
    <div class="chatbot-header">
        <h1>{% trans %}FAQ Chatbot{% endtrans %}</h1>
        <p>{% trans %}Ask me anything about our products and services{% endtrans %}</p>
    </div>

    <div class="chat-messages" id="chatMessages">
        <div class="message bot">
            <div class="message-content">
                {% trans %}Hello! I'm here to help you. What would you like to know?{% endtrans %}
            </div>
        </div>
    </div>

    <div class="faq-suggestions">
        <button class="faq-btn" data-question="{% trans %}How do I reset my password?{% endtrans %}">
            {% trans %}How do I reset my password?{% endtrans %}
        </button>
        <button class="faq-btn" data-question="{% trans %}What are your business hours?{% endtrans %}">
            {% trans %}What are your business hours?{% endtrans %}
        </button>
        <button class="faq-btn" data-question="{% trans %}How can I contact support?{% endtrans %}">
            {% trans %}How can I contact support?{% endtrans %}
        </button>
        <button class="faq-btn" data-question="{% trans %}Where can I find documentation?{% endtrans %}">
            {% trans %}Where can I find documentation?{% endtrans %}
        </button>
    </div>

    <div class="typing-indicator" id="typingIndicator">
        <span>●</span><span>●</span><span>●</span>
    </div>

    <div class="chat-input-container">
        <input type="text" class="chat-input" id="chatInput" placeholder="{% trans %}Type your question here...{% endtrans %}" autocomplete="off">
        <button class="send-btn" id="sendBtn">{% trans %}Send{% endtrans %}</button>
    </div>
</div>
{% endblock %}

{% block footer %}
{{ parent() }}

<script type="text/javascript">
$(function() {
    const chatMessages = $('#chatMessages');
    const chatInput = $('#chatInput');
    const sendBtn = $('#sendBtn');
    const typingIndicator = $('#typingIndicator');
    const faqButtons = $('.faq-btn');

    // Add message to chat
    function addMessage(text, isUser = false) {
        const messageClass = isUser ? 'user' : 'bot';
        const messageHtml = `
            <div class="message ${messageClass}">
                <div class="message-content">${isUser ? $('<div>').text(text).html() : text}</div>
            </div>
        `;
        chatMessages.append(messageHtml);
        chatMessages.scrollTop(chatMessages[0].scrollHeight);
    }

    // Show typing indicator
    function showTyping() {
        typingIndicator.show();
        chatMessages.scrollTop(chatMessages[0].scrollHeight);
    }

    // Hide typing indicator
    function hideTyping() {
        typingIndicator.hide();
    }

    // Get bot response from AI API
    function getBotResponse(message) {
        return new Promise((resolve, reject) => {
            // Get current URL and use the same path for POST requests
            const currentUrl = window.location.href;
            
            console.log('Making request to:', currentUrl);
            console.log('Message:', message);
            
            $.ajax({
                url: currentUrl,
                method: 'POST',
                data: {
                    message: message
                },
                dataType: 'json',
                timeout: 30000, // 30 seconds timeout
                success: function(data) {
                    console.log('API Response:', data);
                    if (data.response) {
                        resolve(data.response);
                    } else {
                        resolve('I apologize, but I encountered an issue processing your request. Please try again.');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Chat API Error:', error);
                    console.error('Status:', status);
                    console.error('Response Text:', xhr.responseText);
                    console.error('Status Code:', xhr.status);
                    
                    // Try to parse the response
                    let errorMsg = 'Technical difficulties';
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response.response) {
                            errorMsg = response.response;
                        }
                    } catch (e) {
                        // If it's not JSON, show the raw response
                        if (xhr.responseText) {
                            errorMsg = 'Server error: ' + xhr.responseText.substring(0, 200);
                        }
                    }
                    
                    if (status === 'timeout') {
                        resolve('I apologize for the delay. Please try asking your question again.');
                    } else {
                        resolve(errorMsg);
                    }
                }
            });
        });
    }

    // Send message
    async function sendMessage() {
        const message = chatInput.val().trim();
        if (!message) return;

        // Disable input and button during processing
        chatInput.prop('disabled', true);
        sendBtn.prop('disabled', true);

        // Add user message
        addMessage(message, true);
        chatInput.val('');
        
        // Show typing indicator
        showTyping();
        
        try {
            // Get AI response
            const response = await getBotResponse(message);
            hideTyping();
            addMessage(response);
        } catch (error) {
            hideTyping();
            addMessage('I apologize, but I encountered an error processing your request. Please try again.');
        } finally {
            // Re-enable input and button
            chatInput.prop('disabled', false);
            sendBtn.prop('disabled', false);
            chatInput.focus();
        }
    }

    // Event listeners
    sendBtn.on('click', sendMessage);
    
    chatInput.on('keypress', function(e) {
        if (e.which === 13) { // Enter key
            e.preventDefault();
            sendMessage();
        }
    });

    // FAQ button clicks
    faqButtons.on('click', function() {
        const question = $(this).data('question');
        chatInput.val(question);
        sendMessage();
    });

    // Focus input on load
    chatInput.focus();
});
</script>
{% endblock %}

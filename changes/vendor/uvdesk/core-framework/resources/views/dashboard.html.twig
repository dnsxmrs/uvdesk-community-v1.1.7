{% comment %}

PUT THE CODE IN THIS FILE TO THE SAME DIRECTORY AND FILE
THIS REFLECTS THE CHANGES IN THE FILE

{% endcomment %}

{% extends "@UVDeskCoreFramework//Templates//layout.html.twig" %}

{% block title %}Dashboard{% endblock %}

{% block templateCSS %}
	<style>
		.uv-activity-wrapper {
			margin-top: 60px;
		}
		.uv-activity-wrapper .uv-activity-chart-col-lt {
			width: 80%;
			float: left;
		}
		ul.uv-activity-brick-wrapper {
			list-style: none;
			margin: 0;
			padding: 0;
			width: 100%;
    		display: inline-block;
		}
		ul.uv-activity-brick-wrapper li {
			width: 25%;
			display: inline-block;
			float: left;
			padding-left: 10px;
			padding-right: 10px;
			color: #fff;
		}
		ul.uv-activity-brick-wrapper .uv-activity-brick {
			border-radius: 3px;
    		padding: 10px;
			text-align: center;
		}
		ul.uv-activity-brick-wrapper li a {
			color: #fff;
			font-size: 45px;
			width: 100%;
    		display: inline-block;
		}
		ul.uv-activity-brick-wrapper li label {
			font-size: 18px;
			width: 100%;
    		display: inline-block;
		}
		.uv-activity-chart-bottom-row .uv-pannel-body {
			height: 450px;
		}
		.kudos-overview {
			width: 40%;
			float: left;
			padding-right: 10px;
		}
		.recent-notification {
			width: 30%;
			float: left;
			padding-left: 10px;
		}
		.completion-chart {
			width: 300px;
			margin: 0 auto;
		}
		.progress-meter .background {
			fill: #EFEFEF;
		}
		.progress-meter text {
			font-size: 30px;
		}
		.kudos-overview .uv-pannel-body {
			text-align: center;
			padding-top: 50px;
		}
		.kudos-overview .uv-pannel-body label {
			margin-top: 10px;
    		display: inline-block;
		}
		.recent-notification ul {
			list-style: none;
			padding: 0;
			margin: 0;
			overflow-y: auto;
			max-height: 400px !important;
		}
		.recent-notification .uv-pannel-body {
			padding: 0;
		}
		.recent-notification ul li {
			color: #333333;
			border-bottom: solid 1px #D3D3D3;
			padding: 15px 20px;
		}
		.recent-notification ul li:first-child {
			border-top: none;
		}
		.recent-notification ul li:last-child {
			border-bottom: none;
		}
		.recent-notification ul li * {
			display: inline-block !important;
		}
		.recent-notification ul li .timeago {
			color: #9E9E9E;
			margin-top: 5px;
			font-size: 13px;
		}
		.recent-notification label {
			text-align: center;
			display: inline-block;
			width: 100%;
			padding-top: 15px;
			border-top: 1px solid #d3d3d3;
		}
		.recent-notification span.uv-notification-message {
			float: left;
			width: 100%;
		}
		.kudos-count {
			width: 30%;
			float: left;
			padding-right: 10px;
			padding-left: 10px;
		}
		.kudos-count .uv-pannel-body {
			padding-top: 50px;
			overflow-y: auto;
		}
		.kudos-count ul {
			list-style: none;
			padding: 0;
			margin: 0;
		}
		.kudos-count ul li {
			width: 100%;
			display: inline-block;
			padding: 15px 0;
		}
		.kudos-count ul li .uv-icon-kudos  {
			vertical-align: middle;
			margin-right: 10px;
		}

	@media screen and (max-width: 1024px) {
			.uv-activity-wrapper .uv-activity-chart-col-lt {
				width: 100%;
				padding: 0;
			}
			.uv-activity-wrapper .uv-activity-chart-col-rt {
				width: 100%;
			}
			.kudos-overview {
				width: 100%;
				padding: 0;
			}
			.kudos-count {
				width: 100%;
				padding: 0;
			}
			.recent-notification {
				width: 100%;
				padding: 0;
			}
			ul.uv-activity-brick-wrapper li {
				width: 50%;
				margin: 10px 0;
			}
		}
		@media screen and (max-width: 768px) {
			ul.uv-activity-brick-wrapper li {
				width: 100%;
			}
		}
		@media screen and (max-width: 467px) {
			.completion-chart {
				width: 100%;
			}
		}
		span.uv-notification-message a:link, span.uv-notification-message a:visited, label a:link, label a:visited {
			color: #2750C4;
			font-size: 15px;
		}
		.uv-mob-aside {
			display: none;
		}
		#btn-disclaimer {
  			position: fixed;
  			right: 25px;
  			bottom: 10px;
			background: url("");
		}
		.uv-activity-wrapper .uv-activity-chart-col-rt {
			width: 20%;
			float: left;
		}
		.uv-activity-chart-col-rt ul {
			padding: 0;
			margin: 0;
			list-style: none;
		}
		.uv-activity-chart-col-rt ul li {
			margin-bottom: 10px
		}
		.uv-activity-chart-col-rt ul li span {
			width: 100%;
			display: inline-block;
			color: #6f6f6f;
		}
		.uv-middle {
			margin: 0 auto;
			display: inline-block;
			margin-top: 200px;
			text-align: center;
			width: 100%;
		}
		.homepage-row {
			display: flex;
			gap: 20px;
			margin-bottom: 20px;
			flex-wrap: wrap;
		}
		.homepage-row-1 {
			justify-content: space-between;
		}
		.homepage-row-2 {
			justify-content: flex-start;
		}
		.homepage-section {
			background: #fff;
			border-radius: 10px;
			box-shadow: 0 2px 8px #eee;
			padding: 20px;
			text-align: left;
			flex-grow: 1;
			min-width: 280px;
		}
		.homepage-section-large {
			flex-basis: 48%;
		}
		.homepage-section-small {
			flex-basis: 30%;
			margin-right: 20px;
		}
		.uv-brick {
			margin-bottom: 0;
			text-align: left;
		}
		.uv-brick-head h6 {
			font-weight: 700;
			color: #bdbdbd;
			font-size: 14px;
			text-transform: uppercase;
			margin-bottom: 5px;
		}
		.uv-brick-head p {
			font-size: 13px;
			color: #666;
			margin-top: 0;
			margin-bottom: 15px;
		}
		.uv-brick-section {
			text-align: left;
			display: flex;
			flex-wrap: wrap;
			gap: 30px;
		}
		.uv-brick-container {
			display: flex;
			flex-direction: column;
			align-items: center;
			width: 80px;
			text-align: center;
		}
		.uv-brick-icon {
			width: 50px;
			height: 50px;
			background-color: #8e6be6;
			border-radius: 50%;
			display: flex;
			justify-content: center;
			align-items: center;
			margin-bottom: 10px;
		}
		.uv-brick-icon svg path {
			fill: #fff !important;
		}
		.uv-brick-container p {
			font-size: 11px;
			font-weight: 600;
			color: #333;
			text-transform: uppercase;
			margin: 0;
		}
		.dashboard-container {
			font-family: Arial, sans-serif;
			background: #faf9fb;
			padding: 20px;
		}
		.dashboard-stats-row {
			display: flex;
			gap: 20px;
			margin-bottom: 20px;
		}
		.dashboard-stat-card {
			flex: 1;
			background: #fff;
			border-radius: 10px;
			box-shadow: 0 2px 8px #eee;
			padding: 20px;
			text-align: center;
		}
		.dashboard-stat-title {
			color: #bdbdbd;
			font-size: 22px;
			font-weight: bold;
		}
		.dashboard-stat-value {
			color: #8e6be6;
			margin-top: 10px;
			font-size: 38px;
			font-weight: bold;
		}
		.dashboard-charts-row {
			display: flex;
			gap: 20px;
			margin-bottom: 20px;
			align-items: stretch;
		}
		.dashboard-chart-card {
			flex: 1;
			background: #fff;
			border-radius: 10px;
			box-shadow: 0 2px 8px #eee;
			padding: 20px;
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			min-width: 0;
		}
		.dashboard-chart-title {
			font-weight: bold;
			color: #bdbdbd;
		}
		.dashboard-chart-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin: 7px 0 20px 0 ;
		}
		.dashboard-chart-buttons {
			font-size: 12px;
			color: #bdbdbd;
		}
		.dashboard-chart-buttons button {
			background: #f3f1f7;
			border: none;
			border-radius: 4px;
			padding: 2px 8px;
			margin-right: 2px;
			cursor: pointer;
			transition: background-color 0.2s;
		}
		.dashboard-chart-buttons button:hover {
			background: #e0d7f0;
		}
		.dashboard-chart-buttons button.active-period {
			background: #8e6be6;
			color: white;
		}
		.dashboard-chart-canvas {
			flex: 1;
			display: flex;
			align-items: center;
		}
		.dashboard-calendar-section {
			background: #fff;
			border-radius: 10px;
			box-shadow: 0 2px 8px #eee;
			padding: 0 20px 20px 20px;
			margin-bottom: 20px;
		}
		.dashboard-calendar-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			margin-bottom: 10px;
			padding: 10px 0 0 0;
		}
		.dashboard-calendar-tables {
			display: flex;
			gap: 20px;
		}
		.dashboard-calendar-table {
			flex: 1;
			border-collapse: separate;
			border-spacing: 0;
			width: 100%;
			background: none;
		}
		.dashboard-calendar-table th {
			color: #bdbdbd;
			font-weight: 400;
			font-size: 15px;
			padding: 6px 0;
			background: #fafbfc;
		}
		.dashboard-calendar-table td {
			text-align: center;
			border-radius: 6px;
			font-size: 15px;
			height: 32px;
			width: 32px;
			color: #222;
			background: none;
			border: #fff 3px solid;
			cursor: pointer;
		}
		.dashboard-calendar-table tr {
			background: none;
		}
		.calendar-btn {
			background: none;
			border: none;
			font-size: 22px;
			color: #bdbdbd;
			cursor: pointer;
		}
		.highlight-yellow {
			background: #ffe6a0 !important;
			color: #222 !important;
		}
		.highlight-blue {
			background: #2196f3 !important;
			color: #fff !important;
		}
		.highlight-red {
			background: #ffb3b3 !important;
			color: #fff !important;
		}
		.calendar-muted {
			color: #bdbdbd !important;
		}
		.dashboard-quick-access {
			background: #ededed;
			color: #979797ff;
			font-weight: bold;
			font-size: 20px;
			padding: 10px 20px;
			border-radius: 8px;
		}
	</style>
{% endblock %}

{% block pageContent %}

	<div class="dashboard-container">

		{# STATS #}
		<div class="dashboard-stats-row">
			<div class="dashboard-stat-card">
				<div class="dashboard-stat-title">Active<br>Tickets</div>
				<div class="dashboard-stat-value">{{ dashboardStats.activeTickets }}</div>
			</div>
			<div class="dashboard-stat-card">
				<div class="dashboard-stat-title">Pending<br>Tickets</div>
				<div class="dashboard-stat-value">{{ dashboardStats.pendingTickets }}</div>
			</div>
			<div class="dashboard-stat-card">
				<div class="dashboard-stat-title">Closed<br>Tickets</div>
				<div class="dashboard-stat-value">{{ dashboardStats.closedTickets }}</div>
			</div>
			<div class="dashboard-stat-card">
				<div class="dashboard-stat-title">Active<br>Agents</div>
				<div class="dashboard-stat-value">{{ dashboardStats.activeAgents }}</div>
			</div>
		</div>

		<div class="dashboard-charts-row">

			{# TICKET STATS #}
			<div class="dashboard-chart-card">
				<div class="dashboard-chart-title">TICKET STATISTICS</div>
				<div class="dashboard-chart-header">
					<span>Tickets Done Today <span id="tickets-today-count" style="color: #8e6be6; font-weight: bold;">{{ ticketChartData.todayCount }}</span></span>
					<div class="dashboard-chart-buttons">
						<button id="chart-btn-1D" class="active-period">1D</button>
						<button id="chart-btn-1M">1M</button>
						<button id="chart-btn-1Y">1Y</button>
						<button id="chart-btn-Max">Max</button>
					</div>
				</div>
				<div class="dashboard-chart-canvas">
					<canvas id="ticketStatsChart" style="width:100%; height:200px;"></canvas>
				</div>
			</div>

			{# AGENT STATS #}
			<div class="dashboard-chart-card">
				<div class="dashboard-chart-title">AGENT STATISTICS</div>
				<div class="dashboard-chart-header">
					<span>Agent Activity Today <span id="agent-activity-today-count" style="color: #8e6be6; font-weight: bold;">{{ agentChartData.todayCount }}</span></span>
					<div class="dashboard-chart-buttons">
						<button id="agent-chart-btn-1D" class="active-period">1D</button>
						<button id="agent-chart-btn-1M">1M</button>
						<button id="agent-chart-btn-1Y">1Y</button>
						<button id="agent-chart-btn-Max">Max</button>
					</div>
				</div>
				<div class="dashboard-chart-canvas">
					<canvas id="agentStatsChart" style="width:100%; height:200px;"></canvas>
				</div>
			</div>
		</div>

		{# CALENDAR #}
		<div class="dashboard-calendar-section">
			<div class="dashboard-calendar-header">
				<button class="calendar-btn" id="calendar-prev">&#60;</button>
				<span id="calendar-month1" style="font-weight: bold; color: #bdbdbd;"></span>
				<span style="width: 40px;"></span>
				<span id="calendar-month2" style="font-weight: bold; color: #bdbdbd;"></span>
				<button class="calendar-btn" id="calendar-next">&#62;</button>
			</div>
			<div class="dashboard-calendar-tables">
				<div id="calendar1" style="flex:1;"></div>
				<div id="calendar2" style="flex:1;"></div>
			</div>
		</div>

		{# Quick Access Header #}
		<div class="dashboard-quick-access">QUICK ACCESS BUTTONS</div>
	</div>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

	<script>
		// Initial chart data from server
		let ticketChart;
		let agentChart;
		let currentTicketPeriod = '1D';
		let currentAgentPeriod = '1D';
		const initialTicketChartData = {{ ticketChartData|json_encode|raw }};
		const initialAgentChartData = {{ agentChartData|json_encode|raw }};

		// Initialize Ticket Statistics Line Chart
		function initTicketChart(chartData) {
			const ctx1 = document.getElementById('ticketStatsChart').getContext('2d');
			
			if (ticketChart) {
				ticketChart.destroy();
			}
			
			ticketChart = new Chart(ctx1, {
				type: 'line',
				data: {
					labels: chartData.labels,
					datasets: [{
						label: 'Tickets',
						data: chartData.data,
						borderColor: '#b08be6',
						backgroundColor: 'rgba(176,139,230,0.1)',
						pointBackgroundColor: '#b08be6',
						pointBorderColor: '#fff',
						tension: 0.4,
						fill: true
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					plugins: { 
						legend: { display: false } 
					},
					scales: {
						x: { 
							display: true, 
							grid: { display: false } 
						},
						y: { 
							display: true, 
							grid: { color: '#f3f1f7' }, 
							beginAtZero: true,
							ticks: {
								precision: 0
							}
						}
					}
				}
			});
		}

		// Initialize Agent Statistics Bar Chart
		function initAgentChart(chartData) {
			const ctx2 = document.getElementById('agentStatsChart').getContext('2d');
			
			if (agentChart) {
				agentChart.destroy();
			}
			
			agentChart = new Chart(ctx2, {
				type: 'bar',
				data: {
					labels: chartData.labels,
					datasets: [{
						label: 'Activity',
						data: chartData.data,
						backgroundColor: '#b08be6',
						borderRadius: 6
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					plugins: { 
						legend: { display: false } 
					},
					scales: {
						x: { 
							display: true, 
							grid: { display: false } 
						},
						y: { 
							display: true, 
							grid: { color: '#f3f1f7' }, 
							beginAtZero: true,
							ticks: {
								precision: 0
							}
						}
					}
				}
			});
		}

		// Load ticket chart data for specific period
		function loadTicketChartData(period) {
			// Update button states
			document.querySelectorAll('[id^="chart-btn-"]').forEach(btn => {
				btn.classList.remove('active-period');
			});
			document.getElementById(`chart-btn-${period}`).classList.add('active-period');
			
			// Make AJAX call to get new data
			fetch('{{ path("helpdesk_member_dashboard_chart_xhr") }}?period=' + period, {
				method: 'GET',
				headers: {
					'X-Requested-With': 'XMLHttpRequest'
				}
			})
			.then(response => response.json())
			.then(data => {
				// Update chart with new data
				initTicketChart(data);
				
				// Update "Tickets Done Today" count
				document.getElementById('tickets-today-count').textContent = data.todayCount;
				
				currentTicketPeriod = period;
			})
			.catch(error => {
				console.error('Error loading ticket chart data:', error);
			});
		}

		// Load agent chart data for specific period
		function loadAgentChartData(period) {
			// Update button states
			document.querySelectorAll('[id^="agent-chart-btn-"]').forEach(btn => {
				btn.classList.remove('active-period');
			});
			document.getElementById(`agent-chart-btn-${period}`).classList.add('active-period');
			
			// Make AJAX call to get new data
			fetch('{{ path("helpdesk_member_dashboard_agent_chart_xhr") }}?period=' + period, {
				method: 'GET',
				headers: {
					'X-Requested-With': 'XMLHttpRequest'
				}
			})
			.then(response => response.json())
			.then(data => {
				// Update chart with new data
				initAgentChart(data);
				
				// Update "Agent Activity Today" count
				document.getElementById('agent-activity-today-count').textContent = data.todayCount;
				
				currentAgentPeriod = period;
			})
			.catch(error => {
				console.error('Error loading agent chart data:', error);
			});
		}

		// Initialize charts with server data
		initTicketChart(initialTicketChartData);
		initAgentChart(initialAgentChartData);

		// Add event listeners for ticket chart period buttons
		document.getElementById('chart-btn-1D').addEventListener('click', () => loadTicketChartData('1D'));
		document.getElementById('chart-btn-1M').addEventListener('click', () => loadTicketChartData('1M'));
		document.getElementById('chart-btn-1Y').addEventListener('click', () => loadTicketChartData('1Y'));
		document.getElementById('chart-btn-Max').addEventListener('click', () => loadTicketChartData('Max'));

		// Add event listeners for agent chart period buttons
		document.getElementById('agent-chart-btn-1D').addEventListener('click', () => loadAgentChartData('1D'));
		document.getElementById('agent-chart-btn-1M').addEventListener('click', () => loadAgentChartData('1M'));
		document.getElementById('agent-chart-btn-1Y').addEventListener('click', () => loadAgentChartData('1Y'));
		document.getElementById('agent-chart-btn-Max').addEventListener('click', () => loadAgentChartData('Max'));

		// Calendar logic
		const highlightDates = {
			// Format: 'YYYY-MM': { day: 'class', ... }
			'2025-07': {
				2: 'highlight-yellow',
				4: 'highlight-blue',
				5: 'highlight-red',
				6: 'highlight-blue',
				9: 'highlight-yellow',
				14: 'highlight-red',
				21: 'highlight-red',
			},
			'2025-08': {
				4: 'highlight-blue',
				6: 'highlight-blue',
				9: 'highlight-yellow',
			}
		};

		function renderCalendar(month, year, containerId, highlightMap) {
			const container = document.getElementById(containerId);
			const firstDay = new Date(year, month, 1);
			const lastDay = new Date(year, month + 1, 0);
			const prevMonthLastDay = new Date(year, month, 0);
			let html = '<table class="dashboard-calendar-table">';
			html += '<thead><tr><th>S</th><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th></tr></thead><tbody>';
			let day = 1;
			let started = false;
			for (let i = 0; i < 6; i++) {
				html += '<tr>';
				for (let j = 0; j < 7; j++) {
					if (i === 0 && j < firstDay.getDay()) {
						// Previous month
						let prevDate = prevMonthLastDay.getDate() - (firstDay.getDay() - j - 1);
						html += `<td class="calendar-muted">${prevDate}</td>`;
					} else if (day > lastDay.getDate()) {
						// Next month
						let nextDate = day - lastDay.getDate();
						html += `<td class="calendar-muted">${nextDate}</td>`;
						day++;
					} else {
						let cls = '';
						if (highlightMap && highlightMap[day]) {
							cls = highlightMap[day];
						}
						html += `<td${cls ? ` class=\"${cls}\"` : ''}>${day}</td>`;
						day++;
					}
				}
				html += '</tr>';
				if (day > lastDay.getDate()) break;
			}
			html += '</tbody></table>';
			container.innerHTML = html;
		}

		// Calendar navigation
		let cal1 = { month: 6, year: 2025 }; // July 2025
		let cal2 = { month: 7, year: 2025 }; // August 2025

		function updateCalendars() {
			const key1 = `${cal1.year}-${String(cal1.month + 1).padStart(2, '0')}`;
			const key2 = `${cal2.year}-${String(cal2.month + 1).padStart(2, '0')}`;
			document.getElementById('calendar-month1').textContent = `${getMonthName(cal1.month)} ${cal1.year}`;
			document.getElementById('calendar-month2').textContent = `${getMonthName(cal2.month)} ${cal2.year}`;
			renderCalendar(cal1.month, cal1.year, 'calendar1', highlightDates[key1] || {});
			renderCalendar(cal2.month, cal2.year, 'calendar2', highlightDates[key2] || {});
		}
		function getMonthName(m) {
			return ["January","February","March","April","May","June","July","August","September","October","November","December"][m];
		}
		document.getElementById('calendar-prev').onclick = function() {
			if (cal1.month === 0) {
				cal1.month = 11; cal1.year--;
			} else {
				cal1.month--;
			}
			if (cal2.month === 0) {
				cal2.month = 11; cal2.year--;
			} else {
				cal2.month--;
			}
			updateCalendars();
		};
		document.getElementById('calendar-next').onclick = function() {
			if (cal1.month === 11) {
				cal1.month = 0; cal1.year++;
			} else {
				cal1.month++;
			}
			if (cal2.month === 11) {
				cal2.month = 0; cal2.year++;
			} else {
				cal2.month++;
			}
			updateCalendars();
		};
		updateCalendars();
	</script>

    <div class="uv-area">
        {{ uvdesk_extensibles.getRegisteredComponent('Webkul\\UVDesk\\CoreFrameworkBundle\\Dashboard\\Dashboard').getHomepageTemplate().render()|raw }}

        <div class="uv-copyright">
            <p style="color: #8a8989ff; margin: unset; font-size: 14px; line-height: 1.4em;">{{ 'Powered by'|trans }} <a href="https://www.uvdesk.com" target="_blank">Uvdesk</a></p>
			<p style="color: #8a8989ff; margin: unset; font-size: 12px; line-height: 1.4em;">Version {{ uvdesk_version }}; Core Version {{ uvdesk_core_version }}</p>
        </div>

		<div class="col-xs-6 col-sm-6 col-md-6 col-lg-6">
    		<button type="submit" class="btn btn-primary btn-md" id="btn-disclaimer" title={{'clear cache'|trans }}><img src="https://api.iconify.design/mdi:delete-restore.svg?height=24" aria-hidden="true"></button>
  		</div>
    </div>

<script>
	$('#btn-disclaimer').click(function(e){

    	$.ajax({
        	url : "{{ path('helpdesk_member_cache_clear') }}",
        	method: 'POST',
        	data: "",
        	success : function(response) {
				app.appView.renderResponseAlert(response);
        	},
        	error: function (xhr) {
            	app.appView.renderResponseAlert(xhr);
        	}
    	});
    });
</script>
{% endblock %}

{% block footer %}
    {{ parent() }}
{% endblock %}
